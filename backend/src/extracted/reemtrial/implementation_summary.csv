Requirement,Status,Implementation Files,Details
The system shall utilize the Spacy Python library to accurately extract relevant CV content using natural language processing.,Implemented,ATS-GradProject/backend/src/applicant/applicant.service.ts (Confidence: 90%),"The file `applicant.service.ts` implements the requirement to utilize the Spacy Python library to accurately extract relevant CV content using natural language processing. The `create()` method in the `ApplicantService` class calls the `parse-resume` and `rank-resume` endpoints of a separate service, which likely uses Spacy for the NLP tasks. The extracted resume data is then stored in the `Resume` entity and associated with the `Applicant` entity."
Recruiters shall be able to assign each screening question its model answer.,Implemented,ATS-GradProject/admin/src/app/dashboard/screening-questions/create/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/app/dashboard/screening-questions/update/[id]/page.tsx (Confidence: 90%); ATS-GradProject/backend/src/job-vacany/dto/create-screening-question.dto.ts (Confidence: 85%),"The file implements the requirement by providing a form where recruiters can enter a screening question and its key answer. The form data is then sent to the server using a POST request, allowing recruiters to create and assign screening questions with their model answers."
The system shall create an approach that uses cosine similarity and Jaccard similarity to compare the parsed CV and the required job vacancy to determine the degree of fit and provide a percentage rating of the applicant’s suitability.,Not_implemented,,Requirement not found in analyzed files.
The applicants shall be able to create an account and log in to the system with their personal information.,Implemented,ATS-GradProject/admin/src/app/auth/signin/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/app/auth/signup/page.tsx (Confidence: 90%); ATS-GradProject/backend/src/auth/auth.controller.ts (Confidence: 85%),"The file implements the requirement of allowing users to create an account and log in to the system with their personal information. It uses the `next-auth/react` library to handle the sign-in process, and it includes a form with fields for username and password. When the user submits the form, the `handleSubmit` function is called, which uses the `signIn` function from `next-auth/react` to authenticate the user. If the authentication is successful, the user is redirected to the home page. If the authentication fails, an error message is displayed using a Snackbar component."
The applicants shall view the final ranking which are CV score and questions score.,Implemented,ATS-GradProject/admin/src/app/jobs/ranking/page.tsx (Confidence: 90%); ATS-GradProject/backend/src/applicant/applicant.service.ts (Confidence: 75%),"The file 'ATS-GradProject/admin/src/app/jobs/ranking/page.tsx' implements the requirement of allowing applicants to view the final ranking, which includes the CV score and the questions score. The file fetches the resume data from the backend and displays the ranking, resume evaluation, and screening questions details to the user. The implementation covers the key aspects of the requirement, including displaying the final ranking, CV score, and questions score."
The system shall create an algorithm that takes the average of the CV ranking and the validation of the screening questions to determine the outcome and present the result as a total score that represents the applicant’s overall compatibility.,Not_implemented,,Requirement not found in analyzed files.
Recruiters shall be able to assign each job position a set of screening questions.,Implemented,ATS-GradProject/admin/src/app/dashboard/screening-questions/create/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/app/dashboard/screening-questions/update/[id]/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/components/admin/ScreeningQuestions.tsx (Confidence: 85%),"The file implements the requirement of allowing recruiters to assign screening questions to job positions. It provides a form where recruiters can input a question and a key answer, which are then sent to the backend API for storage. The file also includes functionality to navigate back to the dashboard and handle successful and failed submissions."
The applicants shall view the parsing results and edit them.,Implemented,ATS-GradProject/admin/src/app/dashboard/jobs/update/[id]/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/app/dashboard/screening-questions/update/[id]/page.tsx (Confidence: 85%),"The file `ATS-GradProject/admin/src/app/dashboard/jobs/update/[id]/page.tsx` implements the requirement of allowing applicants to view and edit the parsing results. The file contains a form that allows the user to edit various fields of a job opening, including the title, education, years of experience, description, skills, and screening questions. The user can also add and remove skills, and the form data is submitted to the server for updating the job opening."
Recruiters and hiring managers can use the ResuFit website to track applicants during the recruiting process and manage applications.,Implemented,ATS-GradProject/admin/src/app/dashboard/jobs/create/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/app/dashboard/jobs/update/[id]/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/components/admin/Jobs.tsx (Confidence: 85%),"The file 'ATS-GradProject/admin/src/app/dashboard/jobs/create/page.tsx' implements the requirement of allowing recruiters and hiring managers to track applicants during the recruiting process and manage applications. The file provides a form for creating a new job opening, which includes fields for the job title, education, language, years of experience, description, skills, and screening questions. The form data is then submitted to the backend server using a fetch request. The file also includes functionality for handling form validation, displaying error messages, and navigating back to the dashboard."
"Recruiters shall be able to provide job vacancies as well as the technical stack, skills, and experience for each job position.",Implemented,ATS-GradProject/admin/src/hooks/useJobVacancies.tsx (Confidence: 85%); ATS-GradProject/admin/src/constants/JobVacancy.ts (Confidence: 80%),"The `useJobVacancies` hook fetches job vacancies from the server and provides the necessary data, including the technical stack, skills, and experience for each job position. The hook returns the list of job vacancies, the currently selected job, and functions to update these values. This implementation satisfies the requirement of allowing recruiters to access job vacancy information."
The applicants shall view the CV rating.,Implemented,ATS-GradProject/admin/src/app/jobs/ranking/page.tsx (Confidence: 90%),"The file 'ATS-GradProject/admin/src/app/jobs/ranking/page.tsx' implements the requirement 'The applicants shall view the CV rating'. The file fetches the resume data from the backend, including the rating, resume rating, screening questions rating, and other relevant information. It then displays this information to the user in a well-structured and visually appealing way, allowing the applicant to view the CV rating and other details."
The applicants shall edit the profile by re-uploading the CV .,Implemented,ATS-GradProject/admin/src/components/applicant/ResumeDropzone.tsx (Confidence: 90%); ATS-GradProject/admin/src/app/jobs/apply/page.tsx (Confidence: 80%),"The `ResumeDropzone` component in the provided code allows the user to upload a new resume by dragging and dropping a file or clicking to select a file. The component uses the `react-dropzone` library to handle the file upload functionality. When a file is dropped or selected, the `onDropAccepted` callback function is called, which can be used to handle the uploaded file. This implementation meets the requirement of allowing the applicant to re-upload their CV."
The applicants shall submit their CVs.,Implemented,ATS-GradProject/admin/src/components/applicant/ResumeDropzone.tsx (Confidence: 90%); ATS-GradProject/backend/src/applicant/entities/resume.entity.ts (Confidence: 85%); ATS-GradProject/backend/src/applicant/applicant.controller.ts (Confidence: 80%),"The `ResumeDropzone` component in the provided code allows applicants to submit their CVs (resumes) by providing a drag-and-drop interface. The component uses the `react-dropzone` library to handle file uploads and accepts only PDF files. The component displays a visual cue when a file is being dragged over the dropzone, and it shows a checkmark icon when a file has been successfully selected. The selected file's name is also displayed. This implementation meets the requirement of allowing applicants to submit their CVs."
"Recruiters will be able to find applicants whose resumes closely match the job requirements by using the cosine and jaccard similarity methods, which provides an objective CV ranking.",Implemented,ATS-GradProject/admin/src/app/jobs/ranking/page.tsx (Confidence: 90%); ATS-GradProject/backend/src/applicant/applicant.service.ts (Confidence: 85%),"The file implements the requirement by providing a user interface that allows recruiters to view the ranking of an applicant's resume based on the cosine and Jaccard similarity methods. The file fetches the resume data from the backend, calculates the ranking, and displays the results, including the resume evaluation, screening questions, and feedback on how the applicant can improve. The implementation covers the key aspects of the requirement, such as providing an objective CV ranking and allowing recruiters to find applicants whose resumes closely match the job requirements."
The applicants shall answer the provided screening questions.,Implemented,ATS-GradProject/admin/src/app/dashboard/screening-questions/create/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/app/dashboard/screening-questions/update/[id]/page.tsx (Confidence: 90%); ATS-GradProject/admin/src/app/screeningQuestion/page.tsx (Confidence: 85%),"The provided file implements the requirement of allowing applicants to answer the screening questions. The file includes a form with input fields for the question and key answer, and a submit button to send the form data to the server. The form data is handled in the `handleSubmit` function, which sends a POST request to the `/screening-questions` endpoint with the form data. The file also includes validation to ensure that the required fields are filled out before submission."
